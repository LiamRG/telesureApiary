FORMAT: 1A

# Easy Earn
This document defines the various Telesure Rewards Program ESB APIs that will be exposed to external systems. These services will allow the Telesure ESB to orchestrate processes with various other systems.

# Group Rewards Cash Back Payment Interfaces
Enter some description here

## Cashback [/cashback/{batchID}/batchHeader]

### Get a SHA256 hash [GET]

+ Parameters
    + batchID (required, string) ... Hash value calculated by the receiving system
    
+ Response 200 (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json
    
    + Body
    
            {
              "sha256HashValue": "CE7402C6A9C794B361FD7FEBAAFE1237656E6B4DA2C57B5E39E8758B71E6BA93",
              "batchID": "75ad9fc5-98fd-4be6-beee-4773c046e98d",
              "calculationYearMonth": "December2015",
              "runDate": "30-01-2015",
              "runTime": "00:01:56",
              "totalCashBackCalculated": 1000.99,
              "totalTransactions": 32,
              "totalUniquePolicies": 30,
              "insurer": "09"
            }
            
    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "sha256HashValue": {
                        "id": "sha256HashValue",
                        "type": "string",
                        "required": true
                    },
                    "batchID": {
                        "id": "batchID",
                        "type": "string",
                        "required": true
                    },
                    "calculationYearMonth": {
                        "id": "calculationYearMonth",
                        "type": "string",
                        "required": true
                    },
                    "runDate": {
                        "id": "runDate",
                        "type": "string",
                        "required": true
                    },
                    "runTime": {
                        "id": "runTime",
                        "type": "string",
                        "required": true
                    },
                    "totalCashBackCalculated": {
                        "id": "totalCashBackCalculated",
                        "type": "number",
                        "required": true
                    },
                    "totalTransactions": {
                        "id": "totalTransactions",
                        "type": "integer",
                        "required": true
                    },
                    "totalUniquePolicies": {
                        "id": "totalUniquePolicies",
                        "type": "integer",
                        "required": true
                    },
                    "insurer": {
                        "id": "insurer",
                        "type": "string",
                        "required": true
                    }
                }
            }
            

# Group DriveFactor Interfaces
The users set of services at /users has all the required user resources and functions.

## Users [/users/{?accountId,rsaId,firstName,lastName,contactNumber,emailAddress}]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>
This operation will create a new user

### Register a new user [POST]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>
Responsible System Analyst : Andre <br>
This payload will register either a PolicyHolder, Regular Driver, Policy Driver or an Aspirant Driver <br><br>
**Policy Holder** - A person with a Telesure policy who is only a policy holder and not a driver <br>
**Regular Driver** - A person associated with a Telesure policy who is only a regular driver <br>
**Policy Driver** - A person associated to Telesure policies who is both a Policy Holder and regular driver <br>
**Aspirant** - A person who as not association to any Telesure policies <br>

+ Request (application/json)


    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
    
            {
                "accountId": "123456",
                "rsaId": "0123456789012",
                "firstName": "Fred",
                "lastName": "Bloggs",
                "contactNumber": "0821234567",
                "emailAddress": "fred@bloggs.com",
                "marketingYN": "N",
                "userDriveFactorPassword": "ABC1230",
                "productTermsConditionsYN": "Y"
            }

    + Schema
        
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "accountId": {
                        "id": "accountId",
                        "type": "string"
                    },
                    "rsaId": {
                        "id": "rsaId",
                        "type": "string"
                    },
                    "firstName": {
                        "id": "firstName",
                        "type": "string"
                    },
                    "lastName": {
                        "id": "lastName",
                        "type": "string"
                    },
                    "contactNumber": {
                        "id": "contactNumber",
                        "type": "string"
                    },
                    "emailAddress": {
                        "id": "emailAddress",
                        "type": "string"
                    },
                    "marketingYN": {
                        "id": "marketingYN",
                        "type": "string"
                    },
                    "userDriveFactorPassword": {
                        "id": "userDriveFactorPassword",
                        "type": "string"
                    },
                    "productTermsConditionsYN": {
                        "id": "productTermsConditionsYN",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "userType",
                    "rsaId",
                    "firstName",
                    "lastName",
                    "contactNumber",
                    "emailAddress",
                    "marketingYN",
                    "userDriveFactorPassword",
                    "productTermsConditionsYN"
                ]
            } 
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
    + Schema
    
+ Response 409 (application/json)


    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
  
            {
                "errors": [
                    {
                        "userMessage": "DuplicateUser",
                        "internalMessage": "accountId",
                        "code": 409,
                        "moreInfo": ""
                    }
                ]
            }

    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "errors": {
                  "id": "errors",
                  "type": "array",
                  "items": {
                    "id": "0",
                    "type": "object",
                    "properties": {
                      "userMessage": {
                        "id": "userMessage",
                        "type": "string",
                        "enum" : ["DuplicateUser","DuplicateEmailAddress","DuplicateRSAID"]
                      },
                      "internalMessage": {
                        "id": "internalMessage",
                        "type": "string",
                        "enum" : ["rsaId","accountId","emailAddress"]
                      },
                      "code": {
                        "id": "code",
                        "type": "integer"
                      },
                      "moreInfo": {
                        "id": "moreInfo",
                        "type": "string"
                      }
                    },
                    "required": [
                      "userMessage",
                      "internalMessage",
                      "code",
                      "moreInfo"
                    ]
                  },
                  "required": [
                    "0"
                  ]
                }
              },
              "required": [
                "errors"
              ]
            }
         
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)



+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
        
### Retrieve a user [GET]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>
Responsible System Analyst : Andre <br>
A reusable service that will allow an external system to retrieve details about a specific user.

+ Parameters
    + accountId (optional, string) ... Unique identifier of the user. Must be unique across all systems.
    + rsaId (optional, string) ... Unique South African identification number
    + contactNumber (optional, string) ... Users mobile contact number
    + emailAddress (optional, string) ... Users email address
    + firstName (optional, string) ... Users first name
    + lastName (optional, string) ... Users last name
    
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "responseCode": "2",
                "responseDescription": "2 - Unregistered user",
                "userBiographicalInformation": {
                    "firstName": "Joe",
                    "lastName": "Bloggs",
                    "contactnumber": "0111234567",
                    "rsaId": "1234567890123",
                    "emailAddress": "someone@somewhere.com"
                },
                "driveFactorInformation": {
                    "driveFactorAccountId": "6170",
                    "driveFactorAppPasswordHash": "",
                    "userType": "RegularDriver"
                },
                "userAssistance": {
                    "firstManagementUsage": {
                        "freeAssistQualification": true,
                        "assistWorkInProgressCount": 0,
                        "assistCompletedCount": 0,
                        "assistCancelledCount": 0
                    }
                },
                "policyList": [
                    "123",
                    "1234",
                    "12345"
                ]
            }
    
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "responseCode": {
                        "id": "responseCode",
                        "type": "string",
                        "enum": [
                            "0",
                            "1",
                            "2"
                        ]
                    },
                    "responseDescription": {
                        "id": "responseDescription",
                        "type": "string",
                        "enum": [
                            "0 - User not found",
                            "1 - Fully Registered User",
                            "2 - Unregistered user"
                        ]
                    },
                    "userBiographicalInformation": {
                        "id": "userBiographicalInformation",
                        "type": "object",
                        "properties": {
                            "firstName": {
                                "id": "firstName",
                                "type": "string"
                            },
                            "lastName": {
                                "id": "lastName",
                                "type": "string"
                            },
                            "contactnumber": {
                                "id": "contactnumber",
                                "type": "string"
                            },
                            "rsaId": {
                                "id": "rsaId",
                                "type": "string"
                            },
                            "emailAddress": {
                                "id": "emailAddress",
                                "type": "string"
                            }
                        }
                    },
                    "driveFactorInformation": {
                        "id": "driveFactorInformation",
                        "type": "object",
                        "properties": {
                            "driveFactorAccountId": {
                                "id": "driveFactorAccountId",
                                "type": "string"
                            },
                            "driveFactorAppPasswordHash": {
                                "id": "driveFactorAppPasswordHash",
                                "type": "string"
                            },
                            "userType": {
                                "id": "userType",
                                "type": "string",
                                "enum": [
                                    "RegularDriver",
                                    "Aspirant",
                                    "PolicyHolder",
                                    "PolicyDriver"
                                ]
                            }
                        }
                    },
                    "userAssistance": {
                        "id": "userAssistance",
                        "type": "object",
                        "properties": {
                            "firstManagementUsage": {
                                "id": "firstManagementUsage",
                                "type": "object",
                                "properties": {
                                    "freeAssistQualification": {
                                        "id": "freeAssistQualification",
                                        "type": "boolean"
                                    },
                                    "assistWorkInProgressCount": {
                                        "id": "assistWorkInProgressCount",
                                        "type": "integer"
                                    },
                                    "assistCompletedCount": {
                                        "id": "assistCompletedCount",
                                        "type": "integer"
                                    },
                                    "assistCancelledCount": {
                                        "id": "assistCancelledCount",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    },
                    "policyList": {
                        "id": "policyList",
                        "type": "array",
                        "items": {
                            "id": "2",
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "responseCode",
                    "responseDescription",
                    "userBiographicalInformation",
                    "driveFactorInformation",
                    "userAssistance",
                    "policyList"
                ]
            }
            
+ Response 409 (application/json)

  + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

  + Body
  
            {
                "errors": [
                    {
                        "userMessage": "DuplicateUser",
                        "internalMessage": "Conflict",
                        "code": 409,
                        "moreInfo": ""
                    }
                ]
            }

    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "errors": {
                  "id": "errors",
                  "type": "array",
                  "items": {
                    "id": "0",
                    "type": "object",
                    "properties": {
                      "userMessage": {
                        "id": "userMessage",
                        "type": "string"
                      },
                      "internalMessage": {
                        "id": "internalMessage",
                        "type": "string"
                      },
                      "code": {
                        "id": "code",
                        "type": "integer"
                      },
                      "moreInfo": {
                        "id": "moreInfo",
                        "type": "string"
                      }
                    },
                    "required": [
                      "userMessage",
                      "internalMessage",
                      "code",
                      "moreInfo"
                    ]
                  },
                  "required": [
                    "0"
                  ]
                }
              },
              "required": [
                "errors"
              ]
            }
            
+ Response 400 (application/json)

         {
            "errors": [
                {
                    "userMessage": "Something is wrong with your request",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        } 

+ Response 404 (application/json)


+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
### Update an existing user [PUT]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment on 17 Mar 2015</font></b><br><br>
Responsible System Analyst : Andre <br>
This service will allow an external system to update a users detail. This service will never be used by non Aspirant user types.

+ Request (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
    
            {
                "firstName": "Tom",
                "lastName": "106",
                "contactNumber": "0821234567",
                "emailAddress": "106@bloggs.com",
                "marketingYN": "N",
                "userDriveFactorPassword": "ABC1230",
                "productTermsConditionsYN": "Y"
            }

    + Schema
        
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "rsaId": {
                  "id": "rsaId",
                  "type": "string"
                },
                "firstName": {
                  "id": "name",
                  "type": "string"
                },
                "lastName": {
                  "id": "surname",
                  "type": "string"
                },
                "contactNumber": {
                  "id": "phone",
                  "type": "string"
                },
                "emailAddress": {
                  "id": "email",
                  "type": "string"
                },
                "marketingYN": {
                  "id": "marketingYN",
                  "type": "string"
                },
                "userDriveFactorPassword": {
                  "id": "userDriveFactorPassword",
                  "type": "string"
                },
                "productTermsConditionsYN": {
                  "id": "productTermsConditionsYN",
                  "type": "string"
                }
              }
            }

+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "accountId": "123456",
                "userType": "RegularDriver"
            }
            
    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "accountId": {
                  "id": "accountId",
                  "type": "string"
                },
                "userType": {
                  "id": "userType",
                  "type": "string",
                        "enum": [
                            "Aspirant",
                            "PolicyHolder",
                            "RegularDriver",
                            "PolicyDriver"
                        ]
                }
              },
              "required": [
                "accountId",
                "userType"
              ]
            }
             
+ Response 409 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
  
            {
                "errors": [
                    {
                        "userMessage": "DuplicateEmailAddress",
                        "internalMessage": "emailAddress",
                        "code": 409,
                        "moreInfo": ""
                    }
                ]
            }

    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "errors": {
                  "id": "errors",
                  "type": "array",
                  "items": {
                    "id": "0",
                    "type": "object",
                    "properties": {
                      "userMessage": {
                        "id": "userMessage",
                        "type": "string",
                        "enum" : ["DuplicateEmailAddress","DuplicateRSAID"]
                      },
                      "internalMessage": {
                        "id": "internalMessage",
                        "type": "string",
                        "enum" : ["rsaId","emailAddress"]
                      },
                      "code": {
                        "id": "code",
                        "type": "integer"
                      },
                      "moreInfo": {
                        "id": "moreInfo",
                        "type": "string"
                      }
                    },
                    "required": [
                      "userMessage",
                      "internalMessage",
                      "code",
                      "moreInfo"
                    ]
                  },
                  "required": [
                    "0"
                  ]
                }
              },
              "required": [
                "errors"
              ]
            }
         
+ Response 405 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not allowed to modify this user type.",
                    "internalMessage": "Not Allowed",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

       
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)


+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
    
## User dashboard [/users/{accountId}/dashboard]
Responsible System Analyst : Andre <br>
This service will used to retrieve a users dashboard

### Retrieve a user dashboard [GET]

+ Parameters
    + accountId (required, string) ... Unique identifier of the user. Must be unique across all systems.
    
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
              "responseCode": "1",
              "responseDescription": "FullyRegisteredDriverthatisbothaPolicyHolderandRegularDriver",
              "userBiographicalInformation": {
                "firstName": "Joe",
                "lastName": "Bloggs",
                "rsaId": "1234567890123"
              },
              "driveFactorInformation": {
                "driveFactorAccountId": "123456",
                "userType": "RegularDriver"
              },
              "driverList": [
                {
                  "firstName": "Joe",
                  "lastName": "Bloggs",
                  "rsaId": "1234567890123",
                  "userType": "RegularDriver",
                  "regularDriverAccountId": "1234",
                  "currentTier": 1,
                  "currentPointsTierDescription": "Tier1",
                  "currentTotalPoints": 300,
                  "maxPossibleTier": 4,
                  "maxPointsTierDescription": "Tier4",
                  "possiblePointsValue": 500,
                  "currentBalanceToPayback": 155.95,
                  "amountOfLastPayment": 120.98,
                  "rebate90DayAmount": 300.99
                },
                {
                  "firstName": "Max",
                  "lastName": "Payne",
                  "rsaId": "1234567890124",
                  "userType": "RegularDriver",
                  "regularDriverAccountId": "1234",
                  "currentTier": 1,
                  "currentPointsTierDescription": "Tier1",
                  "currentTotalPoints": 300,
                  "maxPossibleTier": 4,
                  "maxPointsTierDescription": "Tier4",
                  "possiblePointsValue": 500,
                  "currentBalanceToPayback": 155.95,
                  "amountOfLastPayment": 120.98,
                  "rebate90DayAmount": 300.99
                },
                {
                  "firstName": "Joe",
                  "lastName": "Bloggs",
                  "rsaId": "1234567890123",
                  "userType": "RegularDriver",
                  "regularDriverAccountId": "1234",
                  "currentTier": 1,
                  "currentPointsTierDescription": "Tier1",
                  "currentTotalPoints": 300,
                  "maxPossibleTier": 4,
                  "maxPointsTierDescription": "Tier4",
                  "possiblePointsValue": 500,
                  "currentBalanceToPayback": 155.95,
                  "amountOfLastPayment": 120.98,
                  "rebate90DayAmount": 300.99
                }
              ]
            }

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "responseCode": {
                        "id": "responseCode",
                        "required": true,
                        "type": "string"
                    },
                    "responseDescription": {
                        "id": "responseDescription",
                        "required": true,
                        "type": "string"
                    },
                    "userBiographicalInformation": {
                        "id": "userBiographicalInformation",
                        "type": "object",
                        "properties": {
                            "firstName": {
                                "id": "firstName",
                                "required": true,
                                "type": "string"
                            },
                            "lastName": {
                                "id": "lastName",
                                "required": true,
                                "type": "string"
                            },
                            "rsaId": {
                                "id": "rsaId",
                                "required": true,
                                "type": "string"
                            }
                        }
                    },
                    "driveFactorInformation": {
                        "id": "driveFactorInformation",
                        "type": "object",
                        "properties": {
                            "driveFactorAccountId": {
                                "id": "driveFactorAccountId",
                                "required": true,
                                "type": "string"
                            },
                            "userType": {
                                "id": "userType",
                                "required": true,
                                "type": "string",
                                "enum": [
                                    "RegularDriver",
                                    "Aspirant",
                                    "PolicyHolder",
                                    "PolicyDriver"
                                ]
                            }
                        }
                    },
                    "driverList": {
                        "id": "driverList",
                        "type": "array",
                        "items": {
                            "id": "2",
                            "type": "object",
                            "properties": {
                                "firstName": {
                                    "id": "firstName",
                                    "required": true,
                                    "type": "string"
                                },
                                "lastName": {
                                    "id": "lastName",
                                    "required": true,
                                    "type": "string"
                                },
                                "rsaId": {
                                    "id": "rsaId",
                                    "required": true,
                                    "type": "string"
                                },
                                "userType": {
                                    "id": "userType",
                                    "required": true,
                                    "type": "string"
                                },
                                "regularDriverAccountId": {
                                    "id": "regularDriverAccountId",
                                    "required": true,
                                    "type": "string"
                                },
                                "currentTier": {
                                    "id": "currentTier",
                                    "required": true,
                                    "type": "integer"
                                },
                                "currentPointsTierDescription": {
                                    "id": "currentPointsTierDescription",
                                    "required": true,
                                    "type": "string"
                                },
                                "currentTotalPoints": {
                                    "id": "currentTotalPoints",
                                    "required": true,
                                    "type": "integer"
                                },
                                "maxPossibleTier": {
                                    "id": "maxPossibleTier",
                                    "required": true,
                                    "type": "integer"
                                },
                                "maxPointsTierDescription": {
                                    "id": "maxPointsTierDescription",
                                    "required": true,
                                    "type": "string"
                                },
                                "possiblePointsValue": {
                                    "id": "possiblePointsValue",
                                    "required": true,
                                    "type": "integer"
                                },
                                "currentBalanceToPayback": {
                                    "id": "currentBalanceToPayback",
                                    "required": true,
                                    "type": "number"
                                },
                                "amountOfLastPayment": {
                                    "id": "amountOfLastPayment",
                                    "required": true,
                                    "type": "number"
                                },
                                "rebate90DayAmount": {
                                    "id": "rebate90DayAmount",
                                    "required": true,
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }


+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)


+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
        

## User card link [/users/{accountId}/card-links]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>
Responsible System Analyst : Andre <br>
Retrieve a users card link

### Get user payment card link [GET]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment on 16 Mar 2015</font></b><br><br>

+ Parameters
    + accountId (required, string) ... Unique identifier of the user. Must be unique across all systems.

+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "cardNumber" : "123456****1234"
            }
    
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "cardNumber": {
                        "id": "cardNumber",
                        "type": "string"
                    }
                },
                "required": [
                    "cardNumber"
                ]
            }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)


+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 

### Set user payment card link [POST]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment on 16 Mar 2015</font></b><br><br>
Responsible System Analyst : Andre <br>

+ Request (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "cardNumber": {
                        "id": "cardNumber",
                        "type": "string",
                        "required" : true
                    }
                }
            }


    + Body
    
            {
                "cardNumber" : "123456****1234"
            }
    
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

            
+ Response 409 (application/json)

    + Body
    
            {
                "errors": [
                    {
                        "userMessage": "DuplicateCard",
                        "internalMessage": "cardNumber",
                        "code": 409,
                        "moreInfo": ""
                    }
                ]
            }
            
    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "errors": {
                  "id": "errors",
                  "type": "array",
                  "items": {
                    "id": "0",
                    "type": "object",
                    "properties": {
                      "userMessage": {
                        "id": "userMessage",
                        "type": "string",
                        "enum" : ["DuplicateCard"]
                      },
                      "internalMessage": {
                        "id": "internalMessage",
                        "type": "string",
                        "enum" : ["cardNumber"]
                      },
                      "code": {
                        "id": "code",
                        "type": "integer"
                      },
                      "moreInfo": {
                        "id": "moreInfo",
                        "type": "string"
                      }
                    },
                    "required": [
                      "userMessage",
                      "internalMessage",
                      "code",
                      "moreInfo"
                    ]
                  },
                  "required": [
                    "0"
                  ]
                }
              },
              "required": [
                "errors"
              ]
            }
        

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)


+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 


## User refer friend [/users/{accountId}/referFriend]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
Responsible Systems Analyst: <b>Liam Hederman</b> <br/>
Sprint: <b>Telematics Dashboard</b> <br/>

This service will be used by an external calling system when a friend needs to be referred to use the DriveFactor interface.

### Set refer a friend [POST]


+ Request

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
    
            {
                "firstName": "Joe",
                "lastName": "Bloggs",
                "contactNumber": "0821231234",
                "emailAddress": ""
            }

    + Schema
        
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "firstName": {
                  "id": "firstName",
                  "type": "string",
                  "required":true
                },
                "lastName": {
                  "id": "lastName",
                  "type": "string",
                  "required":true
                },
                "contactNumber": {
                  "id": "contactNumber",
                  "type": "string",
                  "required":true
                },
                "emailAddress": {
                  "id": "email",
                  "type": "string",
                  "required":false
                }
              }
            }
    

+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
    
            {
                "accountId": "123456"
            }
 
    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "accountId": {
                        "id": "accountId",
                        "type": "string"
                    },
                    
                }
            }
  
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }
        
+ Response 409 (application/json)

        {
            "errors": [
                {
                    "userMessage": "This friend has already been referred.",
                    "internalMessage": "Conflict",
                    "code": 409,
                    "moreInfo": ""
                }
            ]
        } 

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
            


## User telematic score [/users/{accountId}/score]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
Responsible Systems Analyst: <b>Liam Hederman</b><br/>
Sprint: <b>Telematics Dashboard</b><br/>
<br/>
This service will allow a calling system to POST or PUT a driver score for a specific driver for a specific month.

### Set a users drivers score [POST]

+ Request (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
            
            {
            
                "scoreType":27,
                "scoreVersion":1,
                "score":5.0,
                "date":"2015-03-30T10:01:41Z",
                "ratingLevel":2,
                "ratingDescription":"Neutral", 
                "colorCodeHex": "d9c2b4", 
                "version": 1
            }
    
    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "scoreType": {
                  "id": "scoreType",
                  "type": "integer",
                  "required":true
                },
                "scoreVersion": {
                  "id": "scoreVersion",
                  "type": "integer",
                  "required":true
                },
                "score": {
                  "id": "score",
                  "type": "double,
                  "required":true
                },
                "date": {
                  "id": "date",
                  "type": "string",
                  "required":true
                },
                "ratingLevel": {
                  "id": "ratingLevel",
                  "type": "integer",
                  "required":true
                },
                "ratingDescription": {
                  "id": "ratingDescription",
                  "type": "string",
                  "required":true
                },
                "colorCodeHex": {
                  "id": "colorCodeHex",
                  "type": "string",
                  "required":true
                },
                "version": {
                  "id": "version",
                  "type": "integer",
                  "required":true
                }
              }
            }
            
            
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "accountId": "123456",
                "userType": "RegularDriver"
            }

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "accountId": {
                        "id": "accountId",
                        "type": "string"
                    },
                    "userType": {
                        "id": "userType",
                        "type": "string",
                        "enum": [
                            "RegularDriver",
                            "PolicyHolder",
                            "Aspirant",
                            "PolicyDriver"
                        ]
                    }
                },
                "required": [
                    "accountId",
                    "userType"
                ]
            }

+ Response 409 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You have already submitted a score for this user for your specified time.",
                    "internalMessage": "Conflict",
                    "code": 409,
                    "moreInfo": ""
                }
            ]
        }


+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        


## User assistance [/users/{accountId}/userAssistance]
Responsible System Analyst : Andre <br>
Request Assistance from either FirstManagement or EuropAssist. When CAR then First Assist Management is called, when HOME then EuropAssistance is called.

### Set a user request assistance [POST]
<b><font color="red">Deployed to Telesure Mule TEST Environment on 17 April 2015</font></b><br><br>

+ Request (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json
    
    + Schema
    
                {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "id": "/",
                    "type": "object",
                    "properties": {
                        "assistType": {
                            "id": "assistType",
                            "type": "string",
                            "required" : true,
                            "enum": [
                                "CAR",
                                "HOME"
                            ]
                        },
                        "assistDescription" : {
                            "id" : "assistDescription",
                            "type" : "string",
                            "required" : true,
                            "description" : "This is needed for FAM to indicate whether an accident or roadside assistance is required."    
                            "enum" : [
                                "Accident",
                                "Roadside Assistance",
                                "Home Assistance"
                            ]
                        },
                        "latitude": {
                            "id": "latitude",
                            "type": "string",
                            "required" : false
                        },
                        "longitude": {
                            "id": "longitude",
                            "type": "string",
                            "required" : false
                        }
                    }
                }
    
    + Body
    
            {
              "assistType" : "CAR",
              "assistDescription" : "Accident",
              "latitude": "-28.234924",
              "longitude": "-28.234924"
            }

            
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "assistanceRequestId":"FAM4344"
            }

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "assistanceRequestId": {
                        "id": "assistanceRequestId",
                        "type": "string",
                        "required" : true
                    }
                }
            }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
        
### Get assistance qualification [GET]
Responsible System Analyst : Andre <br>
<b><font color="red">Deployed to Telesure Mule TEST Environment on 22 April 2015</font></b><br><br>
Get a users free assistance indicator. A true means that the user can get free assistance and false means its paid.

+ Parameters

    + accountId (required, number) ... Users unqiue account number from the mobile app
    
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body

            {
                "userAssistance": {
                    "firstManagementUsage": {
                        "freeManagementUsage": true,
                        "assistPending": 1,
                        "assistWorkInProgressCount": 0,
                        "assistCompletedCount": 12,
                        "assistCancelledCount": 2
                    }
                }
            }

    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "userAssistance": {
                        "id": "userAssistance",
                        "type": "object",
                        "properties": {
                            "freeManagementUsage": {
                                "id": "freeManagementUsage",
                                "type": "object",
                                "properties": {
                                    "freeAssistQualification": {
                                        "id": "freeAssistQualification",
                                        "type": "boolean",
                                        "required" : true
                                    },
                                    "assistPending": {
                                        "id": "assistPending",
                                        "type": "integer",
                                        "required" : true
                                    },
                                    "assistWorkInProgressCount": {
                                        "id": "assistWorkInProgressCount",
                                        "type": "integer",
                                        "required" : true
                                    },
                                    "assistCompletedCount": {
                                        "id": "assistCompletedCount",
                                        "type": "integer",
                                        "required" : true
                                    },
                                    "assistCancelledCount": {
                                        "id": "assistCancelledCount",
                                        "type": "integer",
                                        "required" : true
                                    }
                                }
                            }
                        }
                    }
                }
            }
    
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
      


## Get users fuel transactions [/users/{accountId}/fuelTransactions]
Get users fuel transactions

### Get users fuel transactions [GET]

+ Parameters

    + accountId (required, number) ... Users unqiue account number from the mobile app
    
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "fuelTransactionList": [
                    {
                        "dateTime": "2007-03-01T13:00:00Z",
                        "amount": "734.56",
                        "cashBackEarned": "36.73"
                    },
                    {
                        "dateTime": "2007-03-01T13:00:00Z",
                        "amount": "700.42",
                        "cashBackEarned": "30.75"
                    }
                ]
            }
    
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
## Get users activities [/users/{accountId}/activities{?activityFromDate,activityToDate}]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
Responsible Systems Analyst: <b>Liam Hederman</b><br/>
Sprint: <b>Telematics Dashboard</b><br/>
Get users activities. By default this service will return only the activities for the current month which is determined by the ESB sysdate. When a date range is supplied, the response will filter activities where the activity date is between the from and to date.

### Get users activities [GET]

+ Parameters

    + accountId (required, number) ... Users unqiue account number from the mobile app
    + activityFromDate (optional, string) ... This is the activity from date used in the filter of the activity date range. UTC date format. E.g 2015-02-25T16:42:11+00:00
    + activityToDate (optional, string) ... This is the activity to date used in the filter of the activity date range. UTC date format. E.g. 2015-02-25T16:42:11+00:00

+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "activityList": [
                    {
                        "activityId": "001",
                        "activityName": "driveWellPoor",
                        "activityDescription":"Rating on driving behaviour for the month - poor",
                        "activityChapter": "Drive Well",
                        "possiblePoints": "600",
                        "actualPoints": "50"
                    },
                    {
                        "activityId": "007",
                        "activityName": "comprehensiveBuilding",
                        "activityDescription":"Awarded when a user has comprehensive building insurance",
                        "activityChapter": "Insure With Us",
                        "possiblePoints": "50",
                        "actualPoints": "50"
                    }
                ]
            }
            
    + Schema
    
            {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "id": "http://jsonschema.net",
                  "type": "object",
                  "properties": {
                    "activityList": {
                      "id": "http://jsonschema.net/activityList",
                      "type": "array",
                      "items": [
                        {
                          "id": "http://jsonschema.net/activityList/0",
                          "type": "object",
                          "properties": {
                            "activityId": {
                              "id": "http://jsonschema.net/activityList/0/activityId",
                              "type": "integer"
                            },
                            "activityName": {
                              "id": "http://jsonschema.net/activityList/0/activityName",
                              "type": "string"
                            },
                            "activityDescription": {
                              "id": "http://jsonschema.net/activityList/0/activityDescription",
                              "type": "string"
                            },
                            "activityChapter": {
                              "id": "http://jsonschema.net/activityList/0/activityChapter",
                              "type": "string"
                            },
                            "possiblePoints": {
                              "id": "http://jsonschema.net/activityList/0/possiblePoints",
                              "type": "string"
                            },
                            "actualPoints": {
                              "id": "http://jsonschema.net/activityList/0/actualPoints",
                              "type": "string"
                            }
                          }
                        }
                    }
            }
       
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
## Set users activities [/users/{accountId}/activities]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>

### Set users activities [POST]
Responsible System Analyst : <b>Liam Hederman</b> <br>
Sprint: <b>Telematics Dashboard</b>
This payload will add or update an activity for a PolicyHolder, Regular Driver, Policy Driver or an Aspirant Driver <br><br>
**driveWellPoor** - Drive Well. Rating on driving behaviour for the month - poor<br/>
**driveWellAverage** - Drive Well. Rating on driving behaviour for the month - average<br/>
**driveWellGood** - Drive Well. Rating on driving behaviour for the month - good<br/>
**driveWellExcellent** - Drive Well. Rating on driving behaviour for the month - excellent<br/>
**driveWellExceptional** - Drive Well. Rating on driving behaviour for the month - exceptional<br/>
**comprehensiveVehicle** - Comprehensive Vehicle. Awarded when a user has comprehensive vehicle insurance<br/>
**comprehensiveBuilding** - Comprehensive Buildings. Awarded when a user has comprehensive building insurance<br/>
**comprehensiveHomeContents** - Comprehensive Home contents. Awarded when a user has comprehensive home contents<br/>
**otherProducts** - Other Products. Awarded when a user has other products<br/>
**multiProduct** - Multi-product Bonus Points. Awarded when a user has 3 or more products<br/>
**stayWithUs** - Stay With Us. Awarded based on the number of years a policy has been active<br/>
**verifyPolicy** - Verify Policy Information . Declared on the app<br/>
**infoOnline** - Manage Policy Info Online . For a later phase when online provides more functionaility<br/>
**onlineSurvey** - Online Survey. Survey taken through the app<br/>
**experienceRating** - Experience Rating. Survey taken through the app<br/>
**referFriend** - Refer a friend. Friend referred through the app<br/>
**drivingCourse** - Approved Driving Course. Captured on the App<br/>
**vehicleService** - Vehicle Service. Captured on the App<br/>
**geyserInspection** - Geyser Inspection. Captured on the App<br/>
**homeContentsInventory** - Home Contents Inventory. Excluded for phase 1<br/>
**riskAssessment** - Online Risk Assessment. Captured on the App<br/>
**claimsFree** - Stay Claims Free. Provided by the policy/risk from AS400 on the user<br/>

+ Request

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
    
            {
                "activityName": "onlineSurvey",
                "activityDateTime": "20015-04-05T14:30:00Z",
                "actualPoints": 50,
                "possiblePoints": 50
            }

    + Schema
        
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "activityName": {
                  "id": "activityName",
                  "type": "string",
                  "required":true
                },
                "activityDateTime": {
                  "id": "activityDateTime",
                  "type": "string",
                  "required":true
                },
                "actualPoints": {
                  "id": "actualPoints",
                  "type": "integer",
                  "required":false
                },
                "possiblePoints": {
                  "id": "possiblePoints",
                  "type": "integer",
                  "required":false
                }
              }
            }

+ Response 200 (application/json)

    + Header
        
            x-easyearn-accountId: 12312313
        
    + Body
    
            {
                "activityName":"comprehensiveVehicle"
            }
    
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }   
        
## Get users achievements [/users/{accountId}/achievements{?achievementFromDate,achievementToDate}]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
Responsible Systems Analyst: <b>Liam Hederman</b><br/>
Sprint: <b>Telematics Dashboard</b><br/><br/>
Get users achievements.By default this service will return only the activities for the current month which is determined by the ESB sysdate. When a date range is supplied, the response will filter achievements where the achievement date is between the from and to date.

### Get users achievements [GET]

+ Parameters

    + accountId (required, number) ... Users unqiue account number from the mobile app
    + achievementFromDate (optional, string) ... This is the achievement from date used in the filter of the achievement date range. UTC date format. E.g 2015-02-25T16:42:11+00:00
    + achievementToDate (optional, string) ... This is the achievement to date used in the filter of the achievement date range. UTC date format. E.g. 2015-02-25T16:42:11+00:00

+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "achievementList": [
                    {
                        "achievementID": "001",
                        "achievementName": "register",
                        "achievementDescription":"Register on the App",
                        "achievementSequence": "1",
                        "voucherId":"1234-56AB-JKLM",
                        "achievementDateTime": "2015-04-05T14:30:00Z"
                    },
                    {
                        "achievementID": "002",
                        "achievementName": "firstTrip",
                        "achievementDescription":"Take First Trip",
                        "achievementSequence": "2",
                        "voucherId":"",
                        "achievementDateTime": "2015-04-08T12:00:00Z"
                    },
                    {
                        "achievementID": "003",
                        "achievementName": "defeatHtoH5Days",
                        "achievementDescription":"Defeat a Fellow Driver in a head to head over 5 days",
                        "achievementSequence": "3",
                        "voucherId":"",
                        "achievementDateTime": "2015-04-08T12:00:00Z"
                    }
                ]
            }
          
    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                  "id": "achievementList",
                  "type": "array",
                  "items": {
                    "id": "2",
                    "type": "object",
                    "properties": {
                      "achievementID": {
                        "id": "achievementID",
                        "type": "string",
                        "required":true
                      },
                      "achievementName": {
                        "id": "achievementName",
                        "type": "string",
                        "required":true
                      },
                      "achievementDescription": {
                        "id": "achievementDescription",
                        "type": "string",
                        "required":true
                      },
                      "achievementSequence": {
                        "id": "achievementSequence",
                        "type": "string",
                        "required":true
                      },
                      "voucherId": {
                        "id": "voucherId",
                        "type": "string",
                        "required":false
                      },
                      "achievementDateTime": {
                        "id": "achievementDateTime",
                        "type": "string",
                        "required":true
                      }
                    }
                }
              }
            }

    

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
## Set users achievements [/users/{accountId}/achievements{?achievementName,achievementDateTime}]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>

### Set user achievement [POST]
Responsible System Analyst : <b>Liam Hederman</b> <br>
Sprint: <b>Telematics Dashboard</b>
This payload will add or update an achievement for a PolicyHolder, Regular Driver, Policy Driver or an Aspirant Driver <br><br>
** ID: 1** - Name: register. Description: Register on the App<br/>
** ID: 2** - Name: firstTrip. Description: Take 1st Trip<br/>
** ID: 3** - Name: defeatHtoH5Days. Description: Defeat a Fellow Driver in a head to head over 5 days<br/>
** ID: 4** - Name: under1000kmMonth. Description: Under 1000km driving in a month<br/>
** ID: 5** - Name: share5Trips. Description: Share 5 trips on social networks<br/>
** ID: 6** - Name: complete2Tripsin10Days. Description: Complete 2 trips a day for 10 consecutive days<br/>
** ID: 7** - Name: convinceAFriend. Description: Convince a friend to download the app<br/>
** ID: 8** - Name: noHarshBraking. Description: Complete 10 consecutive trips with no harsh braking<br/>
** ID: 9** - Name: exceptionalDriver. Description: Be an Exceptional Driver for 10 Trips<br/>
** ID: 10** - Name: avoidNightDriving. Description: Avoid Driving at Night for 10 days<br/>
** ID: 11** - Name: riskAssessment. Description: Complete Online Risk Assessment<br/>
** ID: 12** - Name: drivingCourse. Description: Complete driving course details<br/>
** ID: 13** - Name: vehicleService. Description: Complete vehicle service details<br/>
** ID: 14** - Name: referFriend. Description: Convince a friend to buy a DialDirect policy<br/>
** ID: 15** - Name: fuelSpend. Description: Buy 100 litres of Total fuel<br/>
** ID: 16** - Name: driveEfficiently. Description: Drive efficiently, under 10l/100kms<br/>

+ Request

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
    
            {
                "achievementName": "register",
                "achievementDateTime": "20015-04-05T14:30:30Z"
            }

    + Schema
        
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "activityName": {
                  "id": "achievementName",
                  "type": "string",
                  "required":true
                },
                "activityDate": {
                  "id": "achievementDateTime",
                  "type": "string",
                  "required":true
                }
              }
            }


+ Response 200 (application/json)

    + Header
        
            x-easyearn-accountId: 12312313
        
    + Body
    
            {
                "achievementName":"avoidNightDriving"
            }
    
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }
        
+ Response 409 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Duplicate achievement.",
                    "internalMessage": "Conflict",
                    "code": 409,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }   
        
## User Vouchers [/users/{accountId}/vouchers-old]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
Responsible Systems Analyst: Liam Hederman

### Get voucher details [GET]
Refresh rewards satchel

+ Request (application/json)


            
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
    
            {
                "voucherList":[
                    "voucherId":"ABCD-GEFJ-KLMN-OPQR",
                    "voucherBarcode":"21234567",
                    "voucherDescription":"R10.00 voucher",
                    "voidedYN":"N",
                    "voidedDate":"",
                    "redeemedYN":"N",
                    "redeemedDate":"",
                    "voucherIssued":"2015-04-01T14:30:00Z",
                    "voucherExpiry":"2015-04-30T14:30:00Z"
                ]
            }
    

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }
        

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
        
## User voucher [/users/{accountId}/vouchers]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>
Responsible Systems Analyst: Liam Hederman

### Award user voucher [POST]
This service will award a new voucher to a user or update an existing voucher
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br> 

+ Request (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
    
    + Body
    
            {
                "voucherId":"ABCD-GEFJ-KLMN-OPQR",
                "voucherBarcode":"21234567",
                "voucherDescription":"R10.00 voucher",
                "voidedYN":"N",
                "voidedDate":"",
                "redeemedYN":"N",
                "redeemedDate":"",
                "voucherIssued":"2015-04-01T14:30:00Z",
                "voucherExpiry":"2015-04-30T14:30:00Z",
                "gpsLat":null,
                "gpsLong":null
            
            }
    
    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "voucherId": {
                  "id": "http://jsonschema.net/voucherId",
                  "required":true,
                  "type": "string"
                },
                "voucherBarcode": {
                  "id": "http://jsonschema.net/voucherBarcode",
                  "required":true,
                  "type": "string"
                },
                "voucherDescription": {
                  "id": "http://jsonschema.net/voucherDescription",
                  "required":true,
                  "type": "string"
                },
                "voidedYN": {
                  "id": "http://jsonschema.net/voidedYN",
                  "required":true,
                  "type": "string"
                },
                "voidedDate": {
                  "id": "http://jsonschema.net/voidedDate",
                  "required":true,
                  "type": "string"
                },
                "redeemedYN": {
                  "id": "http://jsonschema.net/redeemedYN",
                  "required":true,
                  "type": "string"
                },
                "redeemedDate": {
                  "id": "http://jsonschema.net/redeemedDate",
                  "required":true,
                  "type": "string"
                },
                "voucherIssued": {
                  "id": "http://jsonschema.net/voucherIssued",
                  "required":true,
                  "type": "string"
                },
                "voucherExpiry": {
                  "id": "http://jsonschema.net/voucherExpiry",
                  "required":true,
                  "type": "string"
                },
                "gpsLat": {
                  "id": "http://jsonschema.net/gpsLat",
                  "required":false,
                  "type": "string"
                },
                "gpsLong": {
                  "id": "http://jsonschema.net/gpsLong",
                  "required":false,
                  "type": "string"
                }
            }
            
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
    
            {
                "accountId": "123456",
                "voucherId":"ABCD-EFGH-IJKL-MNOP"
            }
    

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }
        
+ Response 409 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Duplicate voucher.",
                    "internalMessage": "Conflict",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
        
### Redeem user voucher [PUT]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
This service will update a voucher. It can be redeemed by updating its redeemedDate

<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br> 

+ Request (application/json)

    + Body
    
            {
              "voucherId": "ABCD-EFGH-IJKL-MNOP",
              "redeemedDate": "2015-04-01T14:30:00Z",
              "gpsLat": "45.92",
              "gpsLong": "46.99"
            }
    
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "voucherId": {
                        "id": "voucherId",
                        "required": true,
                        "type": "string"
                    },
                    "redeemedDate": {
                        "id": "redeemedDate",
                        "required": false,
                        "type": "string"
                    },
                    "gpsLat": {
                        "id": "gpsLat",
                        "required": false,
                        "type": "string"
                    },
                    "gpsLong": {
                        "id": "gpsLong",
                        "required": false,
                        "type": "string"
                    }
                }
            }
            
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "voucherId":"ABCD-EFGH-IJKL-MNOP"
            }
            
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "voucherId": {
                        "id": "voucherId",
                        "required": true,
                        "type": "string"
                    }
                }
            }
    

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }
        
+ Response 409 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Duplicate voucher.",
                    "internalMessage": "Conflict",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
        
### Get voucher details [GET]
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
Retrieve a specific voucher


+ Request (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
    
    + Body
    
            {
                "voucherId":"ABCD-GEFJ-KLMN-OPQR",
            
            }
    
    + Schema
    
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "voucherId": {
                  "id": "http://jsonschema.net/voucherId",
                  "required":true,
                  "type": "string"
                }
            }
            
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
    
            {
                "voucherId":"ABCD-GEFJ-KLMN-OPQR",
                "voucherBarcode":"21234567",
                "voucherDescription":"R10.00 voucher",
                "voidedYN":"N",
                "voidedDate":"",
                "redeemedYN":"N",
                "redeemedDate":"",
                "voucherIssued":"2015-04-01T14:30:00Z",
                "voucherExpiry":"2015-04-30T14:30:00Z"
            }
    

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }
        

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
    
        
## Get user cashback payments [/users/{accountId}/cashbackPayments{?cashbackFromDate,cashBackToDate}]
Responsible Systems Analyst:<b>Liam Hederman</b><br/>
<b><font color="red">Deployed to Telesure Mule TEST Environment</font></b><br><br>
This service will return the list of cashback payment for the participant with the corresponding status. When no cash back dates are supplied, it is taken as all records for this user be returned.

### Get user cashback payments [GET]

+ Parameters
    + accountId (required, string) ... Unique identifier of the user. Must be unique across all systems.
    + cashbackFromDate (optional, string) ... This is the transaction from date used in the filter of the transactionDate range. ISO8601 date format. E.g 2007-03-01T13:00:00Z
    + cashBackToDate (optional, string) ... This is the transaction to date used in the filter of the transactionDate range. ISO8601 date format. E.g. 2007-03-01T13:00:00Z

+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
    
            {
                "totalCashBackEarnedValue" : 599.95,
                "cashbackPaymentsList": [
                    {
                        "paymentTransactionID": "001",
                        "fuelTransactionAmountValue": 100.99,
                        "fuelTransactionDate": "2015-02-25T16:42:11Z",
                        "fuelTransactionLocation" : "Total Woodmead",
                        "fuelCashbackValue" : 12.99
                    },
                    {
                        "paymentTransactionID": "002",
                        "fuelTransactionAmountValue": 100.99,
                        "fuelTransactionDate": "2015-02-25T16:42:11Z",
                        "fuelTransactionLocation" : "Total Rivonia",
                        "fuelCashbackValue" : 12.99
                    },
                    {
                        "paymentTransactionID": "003",
                        "fuelTransactionAmountValue": 100.99,
                        "fuelTransactionDate": "2015-02-25T16:42:11Z",
                        "fuelTransactionLocation" : "Total Dainfern",
                        "fuelCashbackValue" : 12.99
                    }
                ]
            }    
    
    + Schema
            
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "totalCashBackEarnedValue": {
                  "id": "totalCashBackEarnedValue",
                  "type": "number"
                },
                "cashbackPaymentsList": {
                  "id": "cashbackPaymentsList",
                  "type": "array",
                  "items": {
                    "id": "2",
                    "type": "object",
                    "properties": {
                      "paymentTransactionID": {
                        "id": "paymentTransactionID",
                        "type": "string",
                        "required":true
                      },
                      "fuelTransactionAmountValue": {
                        "id": "fuelTransactionAmountValue",
                        "type": "number",
                        "required":true
                      },
                      "fuelTransactionDate": {
                        "id": "fuelTransactionDate",
                        "type": "string",
                        "required":true
                      },
                      "fuelTransactionLocation": {
                        "id": "fuelTransactionLocation",
                        "type": "string",
                        "required":true
                      },
                      "fuelCashbackValue": {
                        "id": "fuelCashbackValue",
                        "type": "number",
                        "required":true
                      }
                    }
                  }
                }
              }
    
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
## User surveys [/users/{accountId}/surveys]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>
Responsible Analyst: <b>Liam Hederman</b><br/><br/>
This service will POST and PUT survey information for specific users. E.g. Home Inventory, Geyser Inspection, Online Risk Assessment, Vehicle Inspection and Driving Course.

### Set user survey [POST]

+ Request (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json
             
    + Body
    
            {
                "completedDate": "2015-04-05T14:30:00Z",
                "surveyID": "ABC1234",
                "surveyType" : "setHomeInventory",
                "surveyVersionNumber" : "123"
            }
             
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "completedDate": {
                        "id": "completedDate",
                        "type": "string",
                        "required":true
                    },
                    "surveyID": {
                        "id": "surveyID",
                        "type": "string",
                        "required":true
                    },
                    "surveyType": {
                        "id": "surveyType",
                        "type": "string",
                        "enum": [
                            "onlineSurvey",
                            "experienceRating",
                            "drivingCourse",
                            "vehicleService",
                            "geyserInspection",
                            "homeContentsInventory",
                            "riskAssessment"
                        ],
                        "required":true
                    },
                    "surveyVersionNumber": {
                        "id": "surveyVersionNumber",
                        "type": "string",
                        "required":true
                    }
                }
            }


    
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
            
            {
                "accountId": "123456"
            }

    + Schema
    
                {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "id": "/",
                    "type": "object",
                    "properties": {
                        "accountId": {
                            "id": "accountId",
                            "type": "string"
                        }
                }

+ Response 409 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You have already submitted a survey for this user for your specified time and survey type.",
                    "internalMessage": "Conflict",
                    "code": 409,
                    "moreInfo": ""
                }
            ]
        }



+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        

## Get user fuel spend limits [/users/{accountId}/fuelSpendLimits]
This service will return the fuel spend limits for the specified accountId

### Retrieve a user fuel spend limits [GET]

+ Parameters
    + accountId (required, string) ... Unique identifier of the user. Must be unique across all systems.
  
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "premiumCapLimit": 550.00,
                "fuelCapLimit": 25.00
                }


    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "premiumCapLimit": {
                        "id": "premiumCapLimit",
                        "required" : true,
                        "type": "integer"
                    },
                    "fuelCapLimit": {
                        "id": "fuelCapLimit",
                        "required" : true,
                        "type": "integer"
                    }
                }
            }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
## User Rewards Updates [/users/rewards]
This operation will be used by an external system to update a specific users rewards data within the ESB.

### Update user rewards [POST]

+ Request (application/json)

    + Body
    
            {
                
            }
+ Response 201 (application/json)

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 

## User Fuel Slip Transaction [/users/{accountId}/fuelSlipTransaction]
This interface supports the creation and retrieval of manual fuel slips. These originate from OCR or a manual form captured by a user. When OCR then the HTTP Status code is 201 and when Manual then the HTTP Status is 202

### Create fuel slip transaction [POST]

+ Request (application/json)

    + Body
    
            {
              "transactionSource": "OCR",
              "dateOfTransaction": "2015-09-23",
              "timeOfTransaction": "14:08:22",
              "transactionNumber": "12312313",
              "randAmount": 250.76,
              "cardNumber": "123456****1234",
              "stationId": "1",
              "stationName": "Total Midrand",
              "litresDispensed": 20.87,
              "fuelType": "Eco Diesel 95",
              "uploadLat": "-24.90",
              "uploadLong": "24.95",
              "fuelSlipImageUrl": "url",
              "sequenceId": "123432",
              "terminalId": "123111"
            }
            
    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "transactionSource": {
                        "id": "transactionSource",
                        "type": "string",
                        "required": true,
                        "enum": [
                            "Manual",
                            "OCR"
                        ]
                    },
                    "dateOfTransaction": {
                        "id": "dateOfTransaction",
                        "type": "string",
                        "required": true
                    },
                    "timeOfTransaction": {
                        "id": "timeOfTransaction",
                        "type": "string",
                        "required": true
                    },
                    "transactionNumber": {
                        "id": "transactionNumber",
                        "type": "string",
                        "required": false
                    },
                    "randAmount": {
                        "id": "randAmount",
                        "type": "number",
                        "required": true
                    },
                    "cardNumber": {
                        "id": "cardNumber",
                        "type": "string"
                    },
                    "stationId": {
                        "id": "stationId",
                        "type": "string"
                    },
                    "stationName": {
                        "id": "stationName",
                        "type": "string"
                    },
                    "litresDispensed": {
                        "id": "litresDispensed",
                        "type": "number",
                        "required": true
                    },
                    "fuelType": {
                        "id": "fuelType",
                        "type": "string"
                    },
                    "uploadLat": {
                        "id": "uploadLat",
                        "type": "string"
                    },
                    "uploadLong": {
                        "id": "uploadLong",
                        "type": "string",
                        "required": true
                    },
                    "fuelSlipImageUrl": {
                        "id": "fuelSlipImageUrl",
                        "type": "string",
                        "required": true
                    },
                    "sequenceId": {
                        "id": "sequenceId",
                        "type": "string"
                    },
                    "terminalId": {
                        "id": "terminalId",
                        "type": "string",
                        "required": true
                    }
                }
            }
            

+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver

    + Body
    
            {
                "responseCode" : "00",
                "responseMessage" : "Approved"
            }
            
    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "responseCode": {
                        "id": "responseCode",
                        "type": "string",
                        "required": true,
                        "enum": [
                            "00",
                            "81",
                            "79",
                            "48",
                            "A1",
                            "A2",
                            "A3",
                            "69",
                            "61",
                            "80",
                            "12",
                            "94",
                            "56"
                        ]
                    },
                    "responseMessage": {
                        "id": "responseMessage",
                        "type": "string",
                        "required": true,
                        "enum": [
                            "Approved",
                            "DeclinedIncorrectMOP",
                            "DeclinedInactivePolicyMember",
                            "DeclinedNonPolicyHolder",
                            "DeclinedNotTotalGarage",
                            "DeclinedFuelSlipNotClear",
                            "DeclinedNotFuelSlip",
                            "Declined48hrSubmission",
                            "DeclinedMemberLimitExceeded",
                            "DeclinedMemberPolicyNotPaid",
                            "DeclinedFuelNotPurchased",
                            "DeclinedDuplicateSubmission",
                            "DeclinedBankAccountDetailsNotLinked"
                        ]
                    }
                }
            }
            

+ Response 202 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313
            x-easyearn-usertype: RegularDriver


+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 


# Group AS400 Interfaces

## Get list of ammended policies [/userPolicy/as400/]
This service will return the user policies that need to be ammended on the ESB, Entelect Encentivise and DriveFactor

### Retrieve a user policy ammendment list [GET]

+ Response 200 (application/json)

    + Body
    
            {
                "policyList" : [
                    {
                        "policyNumber": "A1234"
                    },
                    {
                        "policyNumber": "A1235"
                    },
                    {
                        "policyNumber": "A1236"
                    }
                ]
                
            }
            
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
## Set policy as ammended [/userPolicy/as400/setRemoveAmendedPolicy]
This service will allow the ESB to inform the As400 system that a policy ammendment has been processed by the ESB and that the AS400 can remove this from the list of policies to be ammended.

### Set user policy ammendment completed [POST]

+ Request (application/json)

    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Schema
    
            {
              "type": "object",
              "properties": {
                "policyNumber": {
                  "type": "string",
                  "required" : true
                }
              }
            }


    + Body
    
            {
                "policyNumber": "123456"
            }
    

+ Response 200 (application/json)

    + Body
            
            {
                "status": "1"
            }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 

## Get user policy detail [/userPolicy/as400/{policyNumber}/ws_getpolicyandriskdetails]

### Retrieve policy detail for a specific policy [GET]
This service will retrieve the policy details for a specific policy number

+ Parameters
    + policyNumber (required, string) ... Unique identifier of the policy. Must be unique across all systems.
   
+ Response 200 (application/json)

    + Body
    
            {
              "POLICY": {
                "OTHERCOVERCOUNT": 0.0,
                "POLICYCANCELLATIONDATE": "0001-01-01",
                "POLICYCOMMENCEMENTDATE": "2015-02-17",
                "POLICYHOLDERID": "7510295971189",
                "POLICYHOLDERMOBILENUMBER": "0781231231",
                "POLICYHOLDERNAME": "Tester",
                "POLICYHOLDERSURNAME": "Tester",
                "POLICYLASTCLAIMDATE": "0001-01-01",
                "POLICYSTATUS": "",
                "PREMIUMUPTODATE": "Y",
                "RISKLIST": [
                  {
                    "RISKID": {
                      "RISKBANKDETAILS": {
                        "BANKACCOUNTHOLDERNAME": "Mr T Tester",
                        "BANKACCOUNTTYPE": "Credit Card",
                        "BANKBRANCHCODE": "999998",
                        "BankAccountNumber": "5454545454545454",
                        "BankName": "Mastercard Credit Card"
                      },
                      "RISKBUYUPOPTIONYN": "N",
                      "RISKCANCELLATIONDATE": "0001-01-01",
                      "RISKCOMMENCEMENTDATE": "2015-02-17",
                      "RISKCOVERTYPE": "Comprehensive",
                      "RISKLASTCLAIMDATE": "0001-01-01",
                      "RISKPREMIUM": 477.15,
                      "RISKSEQUENCEID": 1.0,
                      "RISKUSERID": "7510295971189",
                      "RISKUSERMOBILENUMBER": "0781231231",
                      "RISKUSERNAME": "Tester",
                      "RISKUSERSURNAME": "Tester",
                      "RISKVEHICLEREGISTRATIONNUMBER": "TBC",
                      "RiskType": "Motor"
                    }
                  },
                  {
                    "RISKID": {
                      "RISKBANKDETAILS": {
                        "BANKACCOUNTHOLDERNAME": "Mr T Tester",
                        "BANKACCOUNTTYPE": "Credit Card",
                        "BANKBRANCHCODE": "999998",
                        "BankAccountNumber": "5454545454545454",
                        "BankName": "Mastercard Credit Card"
                      },
                      "RISKBUYUPOPTIONYN": "N",
                      "RISKCANCELLATIONDATE": "0001-01-01",
                      "RISKCOMMENCEMENTDATE": "2015-02-17",
                      "RISKCOVERTYPE": "Comprehensive",
                      "RISKLASTCLAIMDATE": "0001-01-01",
                      "RISKPREMIUM": 935.13,
                      "RISKSEQUENCEID": 2.0,
                      "RISKUSERID": "7409040670180",
                      "RISKUSERMOBILENUMBER": "0781231233",
                      "RISKUSERNAME": "James",
                      "RISKUSERSURNAME": "Tester",
                      "RISKVEHICLEREGISTRATIONNUMBER": "TBC",
                      "RiskType": "Motor"
                    }
                  },
                  {
                    "RISKID": {
                      "RISKBANKDETAILS": {
                        "BANKACCOUNTHOLDERNAME": "Mr T Tester",
                        "BANKACCOUNTTYPE": "Credit Card",
                        "BANKBRANCHCODE": "999998",
                        "BankAccountNumber": "5454545454545454",
                        "BankName": "Mastercard Credit Card"
                      },
                      "RISKBUYUPOPTIONYN": "N",
                      "RISKCANCELLATIONDATE": "0001-01-01",
                      "RISKCOMMENCEMENTDATE": "2015-02-17",
                      "RISKCOVERTYPE": "Comprehensive",
                      "RISKLASTCLAIMDATE": "0001-01-01",
                      "RISKPREMIUM": 416.8,
                      "RISKSEQUENCEID": 3.0,
                      "RISKUSERID": "7410068982085",
                      "RISKUSERMOBILENUMBER": "0783434343",
                      "RISKUSERNAME": "Stewart",
                      "RISKUSERSURNAME": "Tester",
                      "RISKVEHICLEREGISTRATIONNUMBER": "TBC",
                      "RiskType": "Motor"
                    }
                  },
                  {
                    "RISKID": {
                      "RISKBANKDETAILS": {
                        "BANKACCOUNTHOLDERNAME": "Mr T Tester",
                        "BANKACCOUNTTYPE": "Credit Card",
                        "BANKBRANCHCODE": "999998",
                        "BankAccountNumber": "5454545454545454",
                        "BankName": "Mastercard Credit Card"
                      },
                      "RISKBUYUPOPTIONYN": "N",
                      "RISKCANCELLATIONDATE": "0001-01-01",
                      "RISKCOMMENCEMENTDATE": "2015-02-17",
                      "RISKCOVERTYPE": "Comprehensive",
                      "RISKLASTCLAIMDATE": "0001-01-01",
                      "RISKPREMIUM": 83.24,
                      "RISKSEQUENCEID": 4.0,
                      "RISKUSERID": "7409040670180",
                      "RISKUSERMOBILENUMBER": "0781231233",
                      "RISKUSERNAME": "James",
                      "RISKUSERSURNAME": "Tester",
                      "RISKVEHICLEREGISTRATIONNUMBER": "TBC",
                      "RiskType": "Motor"
                    }
                  },
                ],
                "PolicyCompany": "",
                "PolicyNumber": "928005086|4SlZEqWZbFhOx8Y2pdg65A2",
                "TotalPremium": 2896.22
              }
            }
            
            
    + Schema
    
            {
              "POLICY": {
                "OTHERCOVERCOUNT": "Decimal",
                "POLICYCANCELLATIONDATE": "String",
                "POLICYCOMMENCEMENTDATE": "String",
                "POLICYHOLDERID": "String",
                "POLICYHOLDERMOBILENUMBER": "String",
                "POLICYHOLDERNAME": "String",
                "POLICYHOLDERSURNAME": "String",
                "POLICYLASTCLAIMDATE": "String",
                "POLICYSTATUS": "String",
                "PREMIUMUPTODATE": "String",
                "RISKLIST": [
                  {
                    "RISKID": {
                      "RISKBANKDETAILS": {
                        "BANKACCOUNTHOLDERNAME": "String",
                        "BANKACCOUNTTYPE": "String",
                        "BANKBRANCHCODE": "String",
                        "BankAccountNumber": "String",
                        "BankName": "String"
                      },
                      "RISKBUYUPOPTIONYN": "String",
                      "RISKCANCELLATIONDATE": "String",
                      "RISKCOMMENCEMENTDATE": "String",
                      "RISKCOVERTYPE": "String",
                      "RISKLASTCLAIMDATE": "String",
                      "RISKPREMIUM": "Decimal",
                      "RISKSEQUENCEID": "Decimal",
                      "RISKUSERID": "String",
                      "RISKUSERMOBILENUMBER": "String",
                      "RISKUSERNAME": "String",
                      "RISKUSERSURNAME": "String",
                      "RISKVEHICLEREGISTRATIONNUMBER": "String",
                      "RiskType": "String"
                    }
                  }
                ],
                "PolicyCompany": "String",
                "PolicyNumber": "String|Ib5Z_bgXYN8CCPNw4vxmUA2",
                "TotalPremium": "Decimal"
              }
            }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 

## Get user policy list [/userPolicy/as400/{idNumber}/getPolicyListByIdnumber]

### Retrieve policy list for a specific user [GET]
This service will retrieve a list of policies where the user is associated with.

+ Parameters
    + idNumber (required, string) ... Unique identifier of the policy. Must be unique across all systems.
   
+ Response 200 (application/json)

    + Body
    
            {
                "policyHolderName": "Joe",
                "policyHolderSurname": "Bloggs",
                "policyList": [
                    {
                        "policyNumber": "String|Ib5Z_bgXYN8CCPNw4vxmUA2"
                    }
                ],
                "status": "1"
            }
            
    + Schema

            {
              "POLICYHOLDERNAME": "String",
              "POLICYHOLDERSURNAME": "String",
              "POLICYLIST": [
                {
                  "PolicyNumber": "String|Ib5Z_bgXYN8CCPNw4vxmUA2"
                }
              ],
              "Status": "Decimal"
            }   

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 
        
# Group DriveFactorOwnedAPI

## Update DF User [/v1/partner/telesure/esb/bot/accounts/sync]
This operation will update a users data on DriveFactor

### Update user [POST]

+ Request (application/json)

    + Body
    
            [{
                "userBiographicalInformation": {
                    "firstName": "Joe",
                    "lastName": "Bloggs",
                    "contactnumber": "0111234567",
                    "rsaId": "1234567890123",
                    "emailAddress": "someone@somewhere.com"
                },
                "driveFactorInformation": {
                    "driveFactorAccountId": "100",
                    "userType": "RegularDriver"
                },
                "policyList": []
            }]

+ Response 200 (application/json)

+ Response 500 (application/json)

# Group Entelect Interfaces
The users set of services at /users has all the required user resources and functions.

## Rewards Profile [/users/{?accountId}/rewardsProfile]

### Create Rewards Profile from Entelect [POST]
Responsible Systems Analyst: <b>Liam Hederman</b><br/>
Sprint: <b>ESB Callback</b><br/>
This payload will create a new profile of points and cashback limits from Entelect <br><br>

+ Request (application/json)


    + Header
    
             Authorization: Basic dGVzdDpwYXNzd29yZDE=
             Accept: application/json

    + Body
    
            {
                "accountId": "123456",
                "callbackDateTime": "2013-03-10T10:00:00Z",
                "currentTier": "2",
                "maxPossibleTier": "5",
                "maxPossiblePoints": "2000",
                "currentTotalPoints": "750",
                "rebateLimit": "132.50",
                "rebatePercentagePerTransaction": "0.1",
                "currentBalanceToPayback": "71.50",
                "rebateRemaining":"61.00",
                "rebateNinetyDays":"345.00",
                "dateOfLastPayment": "2013-02-10T10:00:00Z",
                "amountOfLastPayment": "97.00",
                "paymentStatus": "Paid"
            }

    + Schema
        
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "accountId": {
                  "id": "accountId",
                  "type": "string",
                  "required":true
                },
                "callbackDateTime": {
                  "id": "callbackDateTime",
                  "type": "string",
                  "required":true
                },
                "currentTier": {
                  "id": "currentTier",
                  "type": "string",
                  "required":true
                },
                "maxPossibleTier": {
                  "id": "maxPossibleTier",
                  "type": "string",
                  "required":true
                },
                "maxPossiblePoints": {
                  "id": "maxPossiblePoints",
                  "type": "string",
                  "required":true
                },
                "currentTotalPoints": {
                  "id": "currentTotalPoints",
                  "type": "string",
                  "required":true
                },
                "rebateLimit": {
                  "id": "rebateLimit",
                  "type": "string",
                  "required":true
                },
                "rebatePercentagePerTransaction": {
                  "id": "rebatePercentagePerTransaction",
                  "type": "string",
                  "required":true
                },
                "currentBalanceToPayback": {
                  "id": "currentBalanceToPayback",
                  "type": "string",
                  "required":true
                },
                "rebateRemaining": {
                  "id":"rebateRemaining",
                  "type":"string",
                  "required":true
                },,
                "rebateNinetyDays": {
                  "id":"rebateNinetyDays",
                  "type":"string",
                  "required":true
                }
                "dateOfLastPayment": {
                  "id": "dateOfLastPayment",
                  "type": "string",
                  "required":true
                },
                "amountOfLastPayment": {
                  "id": "amountOfLastPayment",
                  "type": "string",
                  "required":true
                },
                "paymentStatus": {
                  "id": "paymentStatus",
                  "type": "string",
                  "required":true,
                  "enum": [
                    "Paid",
                    "Pending",
                    "Rejected",
                    "No Payment"
                    ]
                }
              }
            }
            
+ Response 201 (application/json)

    + Header
    
            x-easyearn-accountId: 123456

    + Body
    
            {
                "accountId": "123456",
            }
    
    + Schema
    
            {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "id": "/",
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "id": "accountId",
                      "type": "string"
                    },
                  "required": [
                    "accountId"
                  ]
                }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        }
        

## Get users cashback transactions [/users/{accountId}/cashbackTransactions{?fuelTransactionFrom,fuelTransactionTo}]
Responsible Systems Analyst: <b>Liam Hederman</b><br/>
Sprint: <b>Telematics Dashboard</b><br/>
Get users cashback transaction from their fuel and their service station matched off the merchant number for the transaction

### Get users fuel transactions [GET]
<b><font color="red">Deployed to Telesure Mule DEV/TEST Environment</font></b><br><br>

+ Parameters

    + accountId (required, number) ... Users unqiue account number from the mobile app
    + fuelTransactionFrom (required,string) ... Date for the earliest fuel transaction. ISO 8601 UTC format date time.
    + fuelTransactionTo (required,string) ... date for the latest fuel transaction. ISO 8601 UTC format date time
    
+ Response 200 (application/json)

    + Header
    
            x-easyearn-accountId: 12312313

    + Body
    
            {
                "fuelTransactionList": [
                    {
                        "uid":"abc123",
                        "dateTime": "2007-03-01T13:00:00Z",
                        "serviceStationName":"Total Northrand",
                        "liters":"50",
                        "amount": "734.56",
                        "cashBackEarned": "36.73"
                    },
                    {
                        "uid":"abc124",
                        "dateTime": "2007-03-01T13:00:00Z",
                        "serviceStationName":"Total Northrand",
                        "liters":"50",
                        "amount": "700.42",
                        "cashBackEarned": "30.75"
                    }
                ]
            }
            
    + Schema
        
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "uid": {
                    "id":"uid",
                    "type":"string",
                    "required:true
                },
                "dateTime": {
                  "id": "http://jsonschema.net/dateTime",
                  "type": "string",
                    "required:true
                },
                "serviceStationName": {
                  "id": "http://jsonschema.net/dateTime",
                  "type": "string",
                    "required:false
                },
                "liters": {
                  "id": "http://jsonschema.net/liters",
                  "type": "string",
                    "required:true
                },
                "amount": {
                  "id": "http://jsonschema.net/amount",
                  "type": "string",
                    "required:true
                },
                "cashBackEarned": {
                  "id": "http://jsonschema.net/cashBackEarned",
                  "type": "string",
                    "required:true
                }
              }
            }
    
+ Response 400 (application/json)

        {
            "errors": [
                {
                    "userMessage": "Something is wrong with the request.",
                    "internalMessage": "Bad Request",
                    "code": 400,
                    "moreInfo": ""
                }
            ]
        }
        


+ Response 404 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The object you are searching for does not exist.",
                    "internalMessage": "Not found",
                    "code": 404,
                    "moreInfo": ""
                }
            ]
        }

+ Response 401 (application/json)

        {
            "errors": [
                {
                    "userMessage": "You are not authorized to use this service.",
                    "internalMessage": "Unauthorized",
                    "code": 401,
                    "moreInfo": ""
                }
            ]
        }

+ Response 503 (application/json)

        {
            "errors": [
                {
                    "userMessage": "The requested resource is not available.",
                    "internalMessage": "Service Unavailable",
                    "code": 503,
                    "moreInfo": ""
                }
            ]
        } 



## POST Fuel Transactions [/users/{accountId}/fuelSpend]
Post fuel transactions to Entelect when Total, Manual Fuel Slip or the Mobile app sends through fuel transactions.

### Create a fuel transactions  [POST]

+ Request (application/json)


    + Header
    

    + Body
    
            {
                "uid": "123456",
                "transactionDate": "2015-03-26T07:28:27Z",
                "sequence": "12123GT",
                "merchantId": "1231231",
                "merchantName": "Total N3",
                "amount": 199.25,
                "litres": 19.22,
                "source": "Total – TransactionJunction"
            }   
          

    + Schema
    
            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "/",
                "type": "object",
                "properties": {
                    "uid": {
                        "id": "uid",
                        "type": "string",
                        "required": true
                    },
                    "accountId": {
                        "id": "accountId",
                        "type": "string",
                        "required": true
                    },
                    "transactionDate": {
                        "id": "transactionDate",
                        "type": "string",
                        "required": true
                    },
                    "reference": {
                        "id": "reference",
                        "type": "string",
                        "required": true
                    },
                    "sequence": {
                        "id": "sequence",
                        "type": "string",
                        "required": true
                    },
                    "merchantId": {
                        "id": "merchantId",
                        "type": "string",
                        "required": true
                    },
                    "merchantName": {
                        "id": "merchantName",
                        "type": "string"
                    },
                    "amount": {
                        "id": "amount",
                        "type": "number",
                        "required": true
                    },
                    "litres": {
                        "id": "litres",
                        "type": "number",
                        "required": true
                    },
                    "source": {
                        "id": "source",
                        "type": "string",
                        "required": true,
                        "enum": [
                            "Total–TransactionJunction",
                            "Manual",
                            "OCR"
                        ]
                    }
                }
            }
            
            
+ Response 200 (application/json)

    + Header

    + Body
    
            {
              "uid": "1234639",
              "rspCode": "00",
              "transactionDate": "2015-03-26T07:28:27Z",
              "sequence": "12123GT",
              "merchantId": "1231231",
              "merchantName": "Total N3",
              "amount": 720.25,
              "litres": 59.00,
              "source": "Total – TransactionJunction"
            }
            
    + Schema

            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "/",
              "type": "object",
              "properties": {
                "uid": {
                  "id": "uid",
                  "type": "string"
                },
                "transactionDate": {
                  "id": "transactionDate",
                  "type": "string"
                },
                "rspCode": {
                  "id": "rspCode",
                  "type": "string"
                },
                "sequence": {
                  "id": "sequence",
                  "type": "string"
                },
                "merchantId": {
                  "id": "merchantId",
                  "type": "string"
                },
                "merchantName": {
                  "id": "merchantName",
                  "type": "string"
                },
                "amount": {
                  "id": "amount",
                  "type": "number"
                },
                "litres": {
                  "id": "litres",
                  "type": "number"
                },
                "source": {
                  "id": "source",
                  "type": "string"
                }
              },
              "required": [
                "uid",
                "transactionDate",
                "rspCode",
                "sequence",
                "merchantId",
                "merchantName",
                "amount",
                "litres",
                "source"
              ]
            }
            


+ Response 409 (application/json)

  + Body

  + Schema
    
